工作区和暂存区


与svn不同，git有暂存区的概念

工作区(Working Directory)
就是电脑能看到的目录，比如上一节的仓库learn_git就是一个工作区

版本库(Repository)
工作区有一个隐藏的 .git 目录，这不算工作区，而是git的版本库
里面存储了很多东西，最重要的就是称为stage(或者叫index)的暂存区，还有git为我们自动创建的第一个分支master,以及指向master的一个指针叫 Head

把文件往Git版本库里添加的时候，是分两步执行:
1.用 git add 把文件添加进去，实际上就是把文件修改添加到暂存区
2.用 git commit 提交更改，实际上是把暂存区的所有内容提交到当前分支

因为当我们创建仓库的时候，默认为我们创建了唯一一个master分支，现在，git commit 就是往这个分支上提交更改的

上面的可以理解为：需要提交的文件修改统统放到暂存区，然后一次性提交暂存区的所有修改



管理修改

讨论：如果你已经完全掌握了暂存区的概念，考虑下为什么Git比其他版本控制系统设计得优秀？
这是因为Git跟踪并管理的是修改，而非文件。

什么是修改？
新增一行、删除一行，修改某些字符、删了又加，甚至创建新文件等等都是修改

做个实验验证Git管理的是修改，而不是文件：
修改readme.txt,然后提交到暂存区，然后再修改，最后直接commit
如果上面步骤操作完成了，那么如果查看版本库状态  git status  你会发现还有修改未放入暂存区中的文件

现在你可以使用命令  git diff HEAD -- readme.txt 查看工作区和版本库里面最新版本的区别



撤销修改

撤销修改就是把你在工作区写的内容恢复到上一个版本的状态
git checkout -- fileName           可以丢弃工作区的全部修改
PS:注意：该命令的参数中间有空格  --空格+文件名
该命令有两种状态：
1.修改后没有放到暂存区，撤销修改后回到和版本库一模一样的状态
2.修改后提交到了暂存区，则小修改后回到暂存区的版本状态
总之就是把你当前写的代码工作区回到最近一次git commit或git add时的状态
PS：注意：命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。
PS:注意：该命令会使用暂存区或版本库上的代码覆盖本地工作区


git reset head fileName
该命令是把暂存区的修改(未commit提交到版本库)撤销(unstage),也就是删除暂存区的内容，重新放回工作区
意思呢就是你用add命令把修改或新增的文件添加到暂存区，该命令就是把你添加到暂存区的文件撤销掉而已，status状态由绿色变成红色，不会把暂存区的文件撤销回工作区覆盖工作区的文件。


提交到repository的版本库删除
$ git rm 要删除的文件名
$ git commit -m 'delete file'

删错了怎么办？
$ git checkout -- 需要恢复的文件名




























