版本库   repository

在文件夹中创建空repository仓库
$ git init

把文件添加到版本库的暂存区中
$ git add 文件名

把暂存区中所有文件提交到真正的仓库中,也就是往master主分支上提交更改
$ git commit -m '提交当前版本说明'

查看仓库当前的状态
$ git status

查看上次修改文件的内容    diff是difference(差异)的缩写
$ git diff 文件名

查看仓库版本历史记录
$ git log

美化版本库历史记录格式
$ git log -- pretty=oneline

用HEAD表示当前版本

回退上次版本库
$ git reset --hard head^

后悔药,也就是回退上一版本后又想返回下一版本库
$ git reset --hard 版本号        版本号不一定写完

git版本切换非常快 原理？
git内部有个指向当前版本的HEAD指针，回退时，只是把HEAD指针指向指定版本号上

用来记录用户的每一次命令,多用于回退后找回新版本
$ git reflog


-----------------------------------工作区和暂存区
工作区(Working Directory):包含.git文件夹的当前文件夹
版本库(Repository)：.git文件夹
暂存区stage(或index)：.git文件夹内某个文件夹
主要分支(barnch)：master

工作区工作  ---   暂存区Stage   ---   分支(master)
Untracked  --add--     midfifed    --commit--   not tree clrean


丢弃工作区修改
$ git checkout -- 文件名
情况1、工作区内容没有提交到Stage上，执行后恢复到和最新版本库一样
情况2、工作区已经提交到Stage上，又在工作区修改了，执行后恢复到和暂存区状态
注意：当前命令只是改变工作区的内容


把暂存区的内容撤销(unstage),即删除已经提交到暂存区的内容
$ git reset HEAD 文件名


删除版本库
$ git rm 文件名
$ git rm -r 文件夹名
$ git commit -m 'delete files'

查看工作区和版本库里面最新版本的区别
git diff HEAD -- 你的文件名



-----------------------------------远程仓库GitHub
网站创建账户,在用户中找到 SSH Key 
本地创建非对称密钥对 SSH Key
$ ssh-keygen -t rsa -C "youremail@example.com"
测试用可以不输入用户密码
在主目录(Win:C:/User/Administrator/   Linux:/root/)找到.shh目录，找到id_rsa(私钥)和id_rsa.pub(公钥)文件
将公钥内容添加到GitHub上的SSH key页面上



当前现状是本地有一个repository,GitHub创建一个repository,让两个repository关联起来已达到备份和共他人clone

在GitHub上添加一个repository,通过以下命令与GitHub的repository联系起来
$ git remote add origin git@github.com:github上的账号名/github上的仓库名
例如：
$ git remote add origin git@github.com:izding/guid.git

添加后，远程库的默认名字就是origin,也可以改...

把本地库所有内容推送到远程库上
$ git push -u origin master
本地->远程   git push命令  即把当前master分支提交到远程master分支上
第一次提交使用 -u 参数,该参数可以把本地master分支提交到远程master分支上，还会把本地的master分支和远程master分支关联起来，简化以后推送或拉取指令。

从现在起，只要本地做了提交，就可以使用命令
$ git push origin master
把本地master分支的最新修改推送至GitHub

SSH警告提醒：
第一次使用git的push或者clone命令连接github时会得到一个警告：

The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.
RSA key fingerprint is xx.xx.xx.xx.xx.
Are you sure you want to continue connecting (yes/no)?

这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。

Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：
Warning: Permanently added 'github.com' (RSA) to the list of known hosts.
这个警告只会出现一次，后面的操作就不会有任何警告了。

如果你实在担心有人冒充GitHub服务器，输入yes前可以对照GitHub的RSA Key的指纹信息是否与SSH连接给出的一致。


查看远程库的地址
$ git remote -v


克隆远程库到本地库上
$ git clone git@github.com:github上的账号名/库名  [可选值,克隆到本地的目录]





-----------------------------------分支管理
HEAD严格来说不是指向提交，而是指向master,而master才是指向提交，所以HEAD指向的就是当前分支
Head  ->  master  ->  提交(时间线)


创建新分支dev ,指向master相同提交，然后把Head指向新分支dev
Head  ->  dev   ->  指向master相同指向的提交(时间线)

以后再工作区提交修改都是在dev分支向前移动一步，而master指向的提交还是原位置

当需要与dev合并时，就是把master指向的提交指向dev的提交上

最后就可以删除dev分支了


创建一个dev分支
$ git checkout -b dev
-b  表示创建并切换，相当于以下两条命令：
$ git branch dev
$ git checkout dedv

查看当前分支
$ git branch

切换分支
$ git checkout 需要切换的分支

合并分支：将dev内容合并到master分支上,需要在master分支上操作,快进模式
$ git merge dev

合并完后删除dev分支
$ git branch -d dev



合并分支快进模式是乐观的，悲观的合并则是冲突Conflict，产生原因是master分支修改a文件了，而其他分支也修改了a文件
冲突需要手动解决


























































































