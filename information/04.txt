分支管理

分支在实际中有什么用呢？

假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。

现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。


在repository仓库中的每一个commit版本，串联起来就是一条
然而在这条线上有一个默认的主分支master,这条master主分支指针指向版本库时间线上的某个commit
HEAD指向当前分支，如果指向master,而master指向某一个提交版本，那么工作的这个版本就是当前版本

HEAD --指向--> master  --指向--> 提交 

每次提交，master分支都会向前移动一步



当我们创建分支的时候，如dev,相当于在Git新建了一个指针叫dev,指向master相同的提交，再把Head指向dev，就表示当前分支在dev上：
Head  --指向--> dev --指向master相同的提交-->  提交

现在如果再dev 上commit后，dev指针向前移动，master原地不变


当我们在dev开发完成时，需要与master合并，方法是直接把master指向dev的当前提交就行了

合并完成后可以删除dev分支了,其实就是删除dev指针，最后剩下master这条分支了



命令：
创建dev分支：
$ git checkout -b dev
-b参数表示创建并切换，相当于两条命令
$ git branch dev
$ git checkout dev

查看当前分支
$ git branch
命令会列出所有分支，当前分支前面有 * 号


在dev上修改后commit，切换回master分支，将dev修改的内容合并到master分支上
$ git merge dev

git merge命令用于合并指定分支到当前分支
注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。

合并完成后，就可以放心地删除dev分支了：
$ git branch -d dev
删除后，查看branch，就只剩下master分支了：
$ git branch



合并分支并补是一帆风顺的：冲突Conflict
操作出现冲突：两个分支master和m2 ,在m2分支上修改并提交文件a,然后切换回master分支上修改并提交文件a,这时候合并就产生冲突了
$ git merge m2

冲突需要手动打开冲突文件解决

查看冲突的文件
$ git status

Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容





分支管理策略

通常，合并分支时，如果可能，Git会使用Fast forward 模式，但这种模式下，删除分支后，会丢掉分支信息。
如果强制禁止使用 Fast forward 模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。

命令(--no-ff):
git merge --no-ff -m 'other msg' dev



Bug分支
每个Bug都可以通过一个新的临时分支来修复，修复后合并分支，然后删除临时分支
假设，当前正在分支上工作到一半，然而收到一个BUG需要紧急修复,怎么办？
Git提供了一个 stash 功能,可以把当前工作现场 "储藏" 起来，等以后恢复现场后继续工作:
$ git stash


修改完Bug后，回到工作的分支，用git stash list命令查看：
$ git stash list

需要恢复工作现场,有两种办法：
1.恢复工作现场不删除stash内容
$ git stash apply

2.恢复工作现场并删除stash内容
$ git stash pop

多个stash后恢复指定工作现场
$ git stash apply stash@{0}





Feature分支
新功能添加时，为不把主分支搞乱，所以，每添加一个新功能，最好新建一个featrue分支，在featrue分支完成，合并，提交，切换到主分支，准备合并前，但是，新功能取消，需要销毁feature分支
$ git branch -d featrue分支

但是销毁失败，因为featrue分支没有被合并,怎么办？可以强制删除分支：
$ git branch -D deatrue分支








多人协作
查看远程信息
$ git remote

查看远程详细信息
$ git remote -v

推送分支，就是把该分支的所有本地提交推送到远程库上。推送时，要指定本地分支，这样Git就会把该分支推送到远程库对应的远程分支上:
$ git push origin master

要推送其他分支，比如 dev 分支，就写成：
$ git push origin dev





















